// Nixie Â© Karim Vergnes <me@thesola.io>
// Licensed under GNU GPLv2
// Builder for the Nix package manager itself

import { env_var_set } from "std/env"
import { file_exists, dir_exists, dir_create } from "std/fs"

import { pull_source_file } from "../resources.ab"
import { get_cache_root } from "../platform.ab"

import { step_title, get_source_root } from "./common.ab"

/// This function runs within the source directory, in a subshell.
fun build_nix_inner()
{
    let source_root = get_source_root()
    let venv = "{source_root}/nix/venv"

    $mkdir build && cd build$?

    ${venv}/bin/meson setup -Dlibstore:seccomp-sandboxing=disabled \
                            -Dlibcmd:readline-flavor=editline \
                            -Dlibexpr:gc=disabled \
                            -Dlibutil:cpuid=disabled \
                            -Ddoc-gen=false \
                            -Dunit-tests=false \
                            -Dbindings=false \
                            ..$?

    ${venv}/bin/ninja$?
}

/// This is the core function for the final Nix builder.
///
/// It produces a Nix executable in the `{cache_root}/nix-static` location,
/// where the Nix runner expects it.
pub fun build_nix()
{
    let source_root = get_source_root()
    let cache_root = get_cache_root()

    let venv = "{source_root}/nix/venv"

    step_title("nix")

    pull_source_file("nix", "{source_root}/nix")?

    $python3 -m venv --system-site-packages "{venv}"$?

    trust $export LIBRARY_PATH={cache_root}/nix-deps/lib:\$LIBRARY_PATH$
    trust $export PKG_CONFIG_PATH={cache_root}/nix-deps/lib/pkgconfig:{cache_root}/nix-deps/share/pkgconfig:\$PKG_CONFIG_PATH$

    ${venv}/bin/pip install meson ninja$?

    $(cd {source_root}/nix && {nameof build_nix_inner})$?

    trust mv "{source_root}/nix/src/nix/nix" "{cache_root}/nix-static"
}

main(cmdl)
{
    trust env_var_set("_nixie_testing_skip_tarball", "1")
    trust env_var_set("step_total", "1")
    build_nix()?
}
