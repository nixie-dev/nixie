// Nixie Â© Karim Vergnes <me@thesola.io>
// Licensed under GNU GPLv2
// Command line options parser

import { array_remove_at }      from "std/array"
import { starts_with, slice }   from "std/text"
import { echo_error, echo_warning, env_var_get, env_var_set } from "std/env"
import { dir_create }           from "std/fs"

import { untar }                                        from "./common.ab"
import { get_nix_root, get_cache_root, get_repo_root }  from "./platform.ab"

fun cmd_help()
{
    let NIXIE_VERSION = trust env_var_get("NIXIE_VERSION")

    echo "Nix wrapper script, generated by Nixie {NIXIE_VERSION}"
    echo ""
    echo "Available --nixie- options:"

    echo "  --nixie-help            Show this help message and exit."
    echo "  --nixie-print-config    Print this script's configuration."
    echo "  --nixie-extract         Unpack the resources archive into nixie/"
    echo "  --nixie-cleanup         Delete local Nix build files"
    echo "  --nixie-ignore-system   Behave as if Nix was not installed."

    exit 0
}

fun cmd_print_config()
{
    echo trust untar("features", true)
    exit 0
}

fun cmd_extract()
{
    dir_create("nixie")
    cd "nixie"
    trust untar("")
    exit 0
}

fun cmd_cleanup()
{
    let nix_root = get_nix_root()
    let cache_root = get_cache_root()
    let repo_root = get_repo_root()

    echo "Removing local Nix channels and build files..."
    trust $chmod -R +wx {repo_root}/.nixie 2>/dev/null$
    trust $rm -rf {repo_root}/.nixie$

    echo "Removing user Nix store..."
    trust $chmod -R +wx {nix_root} 2>/dev/null$
    trust $rm -rf {nix_root}$

    echo "Removing retrieved Nix binaries..."
    trust $rm -rf {cache_root}/nix-static {cache_root}/nix-lib$

    exit 0
}

fun opt_ignore_system()
{
    echo_warning("Ignoring system-wide Nix for testing purposes.")
    echo_warning("Re-run without the --nixie-ignore-system flag to import the single-user")
    echo_warning("Nix store into the system store.")
    trust env_var_set("nosystem", "1")
}

fun notfound(cmd)
{
    let self = trust env_var_get("0")

    echo_error("No such option: --nixie-{cmd}. Run '{self} --nixie-help' for available options.")
}

fun eval_cmd(cmd)
{
    if {
        cmd == "help":          cmd_help()
        cmd == "print-config":  cmd_print_config()
        cmd == "extract":       cmd_extract()
        cmd == "cleanup":       cmd_cleanup()
        cmd == "ignore-system": opt_ignore_system()
        else: notfound(cmd)
    }
}

pub fun catch_args(ref args: []): Null
{
    let newargs = [Text]

    for arg in args {
        let cmd = ""
        if starts_with(arg, "--nixie-") {
            cmd = slice(arg, len("--nixie-"))
            eval_cmd(cmd)
        } else {
            newargs += [arg]
        }
    }

    args = newargs
}
